import { ContextClassType } from '../types';
import { ArgumentModelType, AttributeModel, OptionArrayModelType, OptionModelType, TerminatorModelType, VariadicArgumentsModelType } from './AttributeModel';
import { FunctionalMap } from './FunctionalMap';
import { HandlerMethod } from './HandlerMethod';
import { HelpData } from './HelpData';
import { RunMethod } from './RunMethod';
export declare class ContextSpec {
    klass: ContextClassType;
    _parent?: ContextSpec;
    arguments: FunctionalMap<string, ArgumentModelType>;
    attributeModels: FunctionalMap<string, AttributeModel>;
    handlerMethods: FunctionalMap<string, HandlerMethod>;
    helpData?: HelpData;
    options: FunctionalMap<string, OptionModelType | OptionArrayModelType>;
    runMethod?: RunMethod;
    subspecs: ContextSpec[];
    terminator?: TerminatorModelType;
    variadicArguments?: VariadicArgumentsModelType;
    constructor(klass: ContextClassType);
    readonly caption: string | undefined;
    readonly commandName: string;
    parent: ContextSpec | undefined;
    addSubspec(spec: ContextSpec): void;
    createInstance(): any;
    setArgumentModel(model: ArgumentModelType): void;
    setHandlerMethod(handler: HandlerMethod): void;
    setHelpData(data: HelpData): void;
    setOptionModel(model: OptionModelType | OptionArrayModelType): void;
    setRunMethod(method: RunMethod): void;
    setTerminatorModel(model: TerminatorModelType): void;
    setVariadicArgumentsModel(model: VariadicArgumentsModelType): void;
}
